[Script Info]
; Script generated by Aegisub 3.1.3
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.601
PlayResX: 1360
PlayResY: 768
Aegisub Video Aspect Ratio: c1.777778
Aegisub Video Zoom Percent: 0.625000
Audio URI: D:/FFOutput/bandicam 2020-11-01 21-38-29-833 00_00_02-00_00_04.mp4
Aegisub Scroll Position: 50
Aegisub Active Line: 52
Video File: D:/FFOutput/bandicam 2020-11-01 21-38-29-833 00_00_02-00_00_04.mp4
Aegisub Video Position: 40907

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,Comic Sans MS,60,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,2,0,2,10,10,10,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:03.00,0:00:08.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Today I will introduce to you how to load model 3D by OpenGL
Dialogue: 0,0:00:09.00,0:00:13.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}As you see here, I have loaded a tree model
Dialogue: 0,0:00:14.00,0:00:20.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}I can use left mouse to rotate
Dialogue: 0,0:00:22.00,0:00:26.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And middle mouse to zoom in/out
Dialogue: 0,0:00:27.00,0:00:31.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Actually these models are made up of an infinite number of triangles
Dialogue: 0,0:00:32.00,0:00:36.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Or quads
Dialogue: 0,0:00:36.00,0:00:40.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}These faces will be stitched together
Dialogue: 0,0:00:41.00,0:00:45.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The more faces the model has
Dialogue: 0,0:00:45.00,0:00:49.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The more realistic the model will be
Dialogue: 0,0:00:59.00,0:01:03.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Now, I will draw a cube by OpenGL
Dialogue: 0,0:01:05.00,0:01:11.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}A cube consists of 8 vertices
Dialogue: 0,0:01:11.00,0:01:15.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And 6 faces
Dialogue: 0,0:01:15.00,0:01:20.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Based on the following coordinate system
Dialogue: 0,0:01:20.00,0:01:33.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The vertices v0 to v7 will have the coordinates shown in the figure
Dialogue: 0,0:01:40.00,0:01:48.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}To draw this cube, I need to keep a complete list of vertices
Dialogue: 0,0:01:56.00,0:02:01.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Also show the faces of the cube
Dialogue: 0,0:02:01.00,0:02:06.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Are made of which vertices
Dialogue: 0,0:02:10.00,0:02:17.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}First, face 0 includes vertex 0, 1, 2, 3
Dialogue: 0,0:02:19.00,0:02:26.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Additional, I need save the normal vector of the face
Dialogue: 0,0:02:26.00,0:02:32.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The main use case for normal vectors are lighting calculations
Dialogue: 0,0:02:32.00,0:02:38.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The brightness of the faces will depend on normal vectors
Dialogue: 0,0:02:39.00,0:03:12.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Similar to the other faces
Dialogue: 0,0:03:16.00,0:03:20.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Yeah, Let's code
Dialogue: 0,0:03:30.00,0:03:34.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}To load Wavefront .obj file, of course we need fstream, you can use stdio too
Dialogue: 0,0:03:36.00,0:03:46.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}We will have to use some additional libraries like vector to store the list, math for calculation
Dialogue: 0,0:03:47.00,0:03:55.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Freeglut for OpenGL, and glext to initialize screen in antialiasing mode
Dialogue: 0,0:03:58.00,0:04:03.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Some libraries load pictures I write
Dialogue: 0,0:04:12.00,0:04:19.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Turn on light, use only 1 light, LIGHT0
Dialogue: 0,0:04:22.00,0:04:27.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Set position of the light
Dialogue: 0,0:04:32.00,0:04:37.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Background color is gray
Dialogue: 0,0:04:39.00,0:04:45.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Set default coordinates by matrix projection
Dialogue: 0,0:04:46.00,0:04:55.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And turn on some beauty modes, 3D
Dialogue: 0,0:05:08.00,0:05:11.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Turn on depth test make OpenGL renders model depend on depth
Dialogue: 0,0:05:11.00,0:05:15.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The things that were ahead obscure the things that were behind
Dialogue: 0,0:05:17.00,0:05:21.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Display function, clear screen first
Dialogue: 0,0:05:38.00,0:05:44.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Main function
Dialogue: 0,0:05:48.00,0:05:58.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Multisample to set the anti-aliasing mode
Dialogue: 0,0:06:26.00,0:06:30.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Ok, run
Dialogue: 0,0:06:40.00,0:06:44.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Now, I will draw a cube
Dialogue: 0,0:06:48.00,0:06:52.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}First, declare 8 vertices of the cube
Dialogue: 0,0:07:23.00,0:07:27.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Next, 6 normal vectors of the cube
Dialogue: 0,0:07:43.50,0:07:48.50,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And 6 faces of the cube, each face includes 4 vertices
Dialogue: 0,0:08:17.00,0:08:23.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Draw 6 faces by glBegin POLYGON
Dialogue: 0,0:08:38.00,0:08:43.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}4 vertices of the polygon correspond to each vertex declared above
Dialogue: 0,0:09:32.00,0:09:36.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Ok, render the cube successfully
Dialogue: 0,0:09:54.00,0:09:58.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Next, I will define the model by a class
Dialogue: 0,0:10:02.00,0:10:06.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Each model includes many faces, so I create a class Face inside
Dialogue: 0,0:10:16.00,0:10:22.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Each face has a number of edges, references to vertices, normal vectors
Dialogue: 0,0:10:44.00,0:10:52.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Texcoords  is the coordinate of the texture but I don't use here, you can see more in my project
Dialogue: 0,0:10:56.00,0:11:03.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Vertices is an index array mapping to list vertices outside
Dialogue: 0,0:11:12.00,0:11:26.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Declare vertices, normals, faces of the model
Dialogue: 0,0:11:38.00,0:11:46.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Next, Write the load model function
Dialogue: 0,0:12:04.00,0:12:08.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Let's take a look at the wavefront .obj file now
Dialogue: 0,0:12:13.00,0:12:18.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}In this file, there are many lines, each line contains characters, followed by numbers
Dialogue: 0,0:12:18.00,0:12:22.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The lines containing the letter v at the beginning
Dialogue: 0,0:12:22.00,0:12:26.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Are the lines containing the coordinates of the vertices with 3 elements x, y, z
Dialogue: 0,0:12:32.00,0:12:40.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}There are very many vertices
Dialogue: 0,0:12:40.00,0:12:44.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}They are numbered starting at 1
Dialogue: 0,0:12:44.00,0:12:48.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}It means the index of first vertex is 1, the second one is 2, etc
Dialogue: 0,0:12:51.00,0:12:55.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The line starts by vn is containing the normal vector
Dialogue: 0,0:12:55.00,0:12:59.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Like vertices, they are numbered starting with 1
Dialogue: 0,0:13:11.00,0:13:15.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Vt is the texture coordinate
Dialogue: 0,0:13:21.00,0:13:25.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And the last one is the most important, faces of the model
Dialogue: 0,0:13:25.00,0:13:29.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}After the letter f there will be 3 or 4 blocks 
Dialogue: 0,0:13:29.00,0:13:33.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Corresponding to a triangle or quad
Dialogue: 0,0:13:33.00,0:13:37.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Each block contains three number
Dialogue: 0,0:13:39.00,0:13:43.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The first is index of vertex
Dialogue: 0,0:13:46.00,0:13:50.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}7 that means first vertex of the face is vertex with index of 7
Dialogue: 0,0:13:53.00,0:13:57.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}This one
Dialogue: 0,0:14:12.00,0:14:16.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}The second is index of texcoord
Dialogue: 0,0:14:21.00,0:14:25.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And the last is index of normal
Dialogue: 0,0:14:26.00,0:14:30.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Our task is load all the vertices, normal vectors
Dialogue: 0,0:14:30.00,0:14:37.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}And draw all faces from vertices have loaded
Dialogue: 0,0:14:46.00,0:14:50.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Let's continue to code
Dialogue: 0,0:15:05.00,0:15:14.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}I use fstream to read all lines from .obj file and store to variable lines
Dialogue: 0,0:15:34.00,0:15:41.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Each line, if starting by v is the vertex
Dialogue: 0,0:15:50.00,0:15:54.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}But the second character can be the letter n or t 
Dialogue: 0,0:15:56.00,0:16:00.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}So we'll check the second character to see
Dialogue: 0,0:16:00.00,0:16:06.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Whether that line declares vertices, texture or normal vectors
Dialogue: 0,0:16:08.00,0:16:16.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Then depends on the type that we will add to the corresponding list
Dialogue: 0,0:17:01.00,0:17:10.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Loading faces is similar
Dialogue: 0,0:17:26.00,0:17:34.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Finished loading, next, our task is drawing
Dialogue: 0,0:17:43.00,0:17:47.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}I will use glNewList to store drawing steps
Dialogue: 0,0:17:50.00,0:17:54.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Draw all faces
Dialogue: 0,0:19:06.00,0:19:10.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Clear memory
Dialogue: 0,0:19:28.00,0:19:32.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Use glCallist to draw, Ok
Dialogue: 0,0:19:49.00,0:19:54.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Now, declare a model
Dialogue: 0,0:20:02.00,0:20:12.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}There are many models here, you can choose one
Dialogue: 0,0:20:13.00,0:20:17.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Which one you like, just copy the name
Dialogue: 0,0:20:24.00,0:20:29.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}I will draw a fox
Dialogue: 0,0:20:43.00,0:20:48.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Draw a model inside display function
Dialogue: 0,0:20:52.00,0:20:56.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Let's see the results
Dialogue: 0,0:20:58.00,0:21:04.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Pretty ok
Dialogue: 0,0:21:22.00,0:21:26.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Actually, There are 4 different types of face storage
Dialogue: 0,0:21:29.00,0:21:35.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Such as missing texcoords
Dialogue: 0,0:21:57.00,0:22:03.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Missing normal vectors
Dialogue: 0,0:22:21.00,0:22:27.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Or only vertices like this
Dialogue: 0,0:22:45.00,0:22:49.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}My project has some extra features
Dialogue: 0,0:22:49.00,0:22:53.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}You can see it on Github
Dialogue: 0,0:22:53.00,0:22:57.00,Default,,0,0,0,,{\fad(400,400)\pos(640,690)}Thanks for watching!